//
// Distributed under the ITensor Library License, Version 1.2
//    (See accompanying LICENSE file.)
//
#ifndef __ITENSOR_MPO_IH
#define __ITENSOR_MPO_IH

namespace itensor {

template <> inline
MPO IQMPO::
toMPO() const
    {
    MPO res(*sites_,logrefNorm_);
    for(int j = 0; j <= N()+1; ++j)
        {
        //if(!res.A_.at(j)) continue;
        res.A_.at(j) = toITensor(A(j));
        }
    return res;
    }
 
//toMPO method fails unless template class 
//Tensor is set to IQTensor (object is an IQMPO)
template<class Tensor>
MPO MPOt<Tensor>::
toMPO() const
    {
    Error("toMPO only implemented for class IQMPO");
    return MPO();
    }

template <> inline
IQMPO MPO::
toIQMPO() const
    {
    IQMPO res(*sites_,logrefNorm_);
    convertToIQ(*sites_,A_,res.A_);
    return res;
    }

//toMPO method fails unless template class 
//Tensor is set to IQTensor (object is an IQMPO)
template<class Tensor>
IQMPO MPOt<Tensor>::
toIQMPO() const
    {
    Error("toIQMPO only implemented for class MPO");
    return IQMPO();
    }

template<typename T>
bool
isComplex(MPOt<T> const& W)
    {
    for(auto j : range1(W.N()))
        {
        if(itensor::isComplex(W.A(j))) return true;
        }
    return false;
    }

template<typename T>
bool
isOrtho(MPOt<T> const& W)
    {
    return W.leftLim()+1 == W.rightLim()-1;
    }

template<typename T>
int
orthoCenter(MPOt<T> const& W)
    {
    if(!isOrtho(W)) Error("orthogonality center not well defined.");
    return (W.leftLim() + 1);
    }

template <class Tensor>
MPOt<Tensor>
sum(MPOt<Tensor> L, 
    MPOt<Tensor> const& R, 
    Args const& args)
    {
    L.plusEq(R,args);
    return L;
    }

//<psi|H|phi>
template <class Tensor>
void 
overlap(MPSt<Tensor> const& psi, 
        MPOt<Tensor> const& H, 
        MPSt<Tensor> const& phi, 
        Real& re, 
        Real& im)
    {
    auto N = H.N();
    if(phi.N() != N || psi.N() != N) Error("psiHphi: mismatched N");

    auto L = phi.A(1); 
    //Some Hamiltonians may store edge tensors in H.A(0) and H.A(N+1)
    L *= (H.A(0) ? H.A(0)*H.A(1) : H.A(1));
    L *= dag(prime(psi.A(1)));
    for(int i = 2; i < N; ++i) 
        { 
        L *= phi.A(i); 
        L *= H.A(i); 
        L *= dag(prime(psi.A(i))); 
        }
    L *= phi.A(N); 
    L *= H.A(N);
    if(H.A(N+1)) L *= H.A(N+1);

    auto z = (dag(prime(psi.A(N)))*L).cplx();
    re = z.real();
    im = z.imag();
    }

template <class Tensor>
Real 
overlap(MPSt<Tensor> const& psi, 
        MPOt<Tensor> const& H, 
        MPSt<Tensor> const& phi) //Re[<psi|H|phi>]
    {
    Real re, im;
    overlap(psi,H,phi,re,im);
    if(std::fabs(im) > 1.0e-12 * std::fabs(re))
        printfln("\nReal psiHphi: WARNING, dropping non-zero (=%.5E) imaginary part of expectation value.",im);
    return re;
    }

template <class Tensor>
Cplx 
overlapC(MPSt<Tensor> const& psi, 
         MPOt<Tensor> const& H, 
         MPSt<Tensor> const& phi) //Re[<psi|H|phi>]
    {
    Real re, im;
    overlap(psi,H,phi,re,im);
    return Cplx(re,im);
    }

template<class Tensor>
void
overlap(MPSt<Tensor> const& psi, 
        MPOt<Tensor> const& H, 
        Tensor const& LB, 
        Tensor const& RB, 
        MPSt<Tensor> const& phi, 
        Real& re, 
        Real& im) //<psi|H|phi>
    {
    auto N = psi.N();
    if(N != phi.N() || H.N() < N) Error("mismatched N in psiHphi");

    auto L = (LB ? LB*phi.A(1) : phi.A(1));
    L *= H.A(1); 
    L *= dag(prime(psi.A(1)));
    for(int i = 2; i <= N; ++i)
        { 
        L *= phi.A(i); 
        L *= H.A(i); 
        L *= dag(prime(psi.A(i))); 
        }

    if(RB) L *= RB;

    auto z = L.cplx();
    re = z.real();
    im = z.imag();
    }

template <class Tensor>
Real
overlap(MPSt<Tensor> const& psi, 
        MPOt<Tensor> const& H, 
        Tensor const& LB, 
        Tensor const& RB, 
        MPSt<Tensor> const& phi) //Re[<psi|H|phi>]
    {
    Real re,im; 
    overlap(psi,H,LB,RB,phi,re,im);
    if(std::fabs(im) > 1.0e-12 * std::fabs(re))
        printfln("Real psiHphi: WARNING, dropping non-zero imaginary part (=%.5E) of expectation value.",im);
    return re;
    }

template <class Tensor>
void
overlap(MPSt<Tensor> const& psi, 
        MPOt<Tensor> const& H, 
        MPOt<Tensor> const& K,
        MPSt<Tensor> const& phi, 
        Real& re, 
        Real& im) //<psi|H K|phi>
    {
    if(psi.N() != phi.N() || psi.N() != H.N() || psi.N() != K.N()) Error("Mismatched N in psiHKphi");
    auto N = psi.N();
    auto psidag = psi;
    for(int i = 1; i <= N; i++)
        {
        psidag.Anc(i) = dag(psi.A(i));
        psidag.Anc(i).mapprime(0,2);
        }
    MPOt<Tensor> Kp(K);
    Kp.mapprime(1,2);
    Kp.mapprime(0,1);

    //scales as m^2 k^2 d
    auto L = (((phi.A(1) * H.A(1)) * Kp.A(1)) * psidag.A(1));
    for(int i = 2; i < N; i++)
        {
        //scales as m^3 k^2 d + m^2 k^3 d^2
        L = ((((L * phi.A(i)) * H.A(i)) * Kp.A(i)) * psidag.A(i));
        }
    //scales as m^2 k^2 d
    L = ((((L * phi.A(N)) * H.A(N)) * Kp.A(N)) * psidag.A(N));
    auto z = L.cplx();
    re = z.real();
    im = z.imag();
    }

template <class Tensor>
Real
overlap(MPSt<Tensor> const& psi, 
         MPOt<Tensor> const& H, 
         MPOt<Tensor> const& K,
         MPSt<Tensor> const& phi) //<psi|H K|phi>
    {
    Real re,im;
    overlap(psi,H,K,phi,re,im);
    if(std::fabs(im) > 1.0e-12 * std::fabs(re))
	Error("Non-zero imaginary part in psiHKphi");
    return re;
    }

template <class Tensor>
Cplx
overlapC(MPSt<Tensor> const& psi, 
          MPOt<Tensor> const& H, 
          MPOt<Tensor> const& K,
          MPSt<Tensor> const& phi) //<psi|H K|phi>
    {
    Real re,im;
    overlap(psi,H,K,phi,re,im);
    return Cplx(re,im);
    }

template <class Tensor>
void 
psiHphi(MPSt<Tensor> const& psi, 
        MPOt<Tensor> const& H, 
        MPSt<Tensor> const& phi, 
        Real& re, 
        Real& im)
    {
    overlap(psi,H,phi,re,im);
    }

template <class Tensor>
Real 
psiHphi(MPSt<Tensor> const& psi, 
        MPOt<Tensor> const& H, 
        MPSt<Tensor> const& phi) //Re[<psi|H|phi>]
    {
    return overlap(psi,H,phi);
    }

template <class Tensor>
Complex 
psiHphiC(MPSt<Tensor> const& psi, 
         MPOt<Tensor> const& H, 
         MPSt<Tensor> const& phi) //Re[<psi|H|phi>]
    {
    return overlapC(psi,H,phi);
    }

template<class Tensor>
void
psiHphi(MPSt<Tensor> const& psi, 
        MPOt<Tensor> const& H, 
        Tensor const& LB, 
        Tensor const& RB, 
        MPSt<Tensor> const& phi, 
        Real& re, 
        Real& im) //<psi|H|phi>
    {
    overlap(psi,H,LB,RB,phi,re,im);
    }

template <class Tensor>
Real
psiHphi(MPSt<Tensor> const& psi, 
        MPOt<Tensor> const& H, 
        Tensor const& LB, 
        Tensor const& RB, 
        MPSt<Tensor> const& phi) //Re[<psi|H|phi>]
    {
    return overlap(psi,H,LB,RB,phi);
    }

template <class Tensor>
void
psiHKphi(MPSt<Tensor> const& psi, 
         MPOt<Tensor> const& H, 
         MPOt<Tensor> const& K,
         MPSt<Tensor> const& phi, 
         Real& re, 
         Real& im) //<psi|H K|phi>
    {
    overlap(psi,H,K,phi,re,im);
    }

template <class Tensor>
Real
psiHKphi(MPSt<Tensor> const& psi, 
         MPOt<Tensor> const& H, 
         MPOt<Tensor> const& K,
         MPSt<Tensor> const& phi) //<psi|H K|phi>
    {
    return overlap(psi,H,K,phi);
    }

template <class Tensor>
Complex
psiHKphiC(MPSt<Tensor> const& psi, 
          MPOt<Tensor> const& H, 
          MPOt<Tensor> const& K,
          MPSt<Tensor> const& phi) //<psi|H K|phi>
    {
    return overlapC(psi,H,K,phi);
    }

} //namespace itensor

#endif
